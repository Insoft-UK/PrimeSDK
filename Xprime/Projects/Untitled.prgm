#pragma mode( separator(.,;) integer(h64) )
channel := 0;
colorsH := 0, colorsS := 100, colorsV := 100;
colorsR := 255, colorsG := 0, colorsB := 0;
colorsUT := 1;
colorsCS := 0;
HEX(d)
BEGIN
  LOCAL h, l;
  h := BITSR(d, 4);
  l := BITAND(d, 15);
  RETURN CHAR( IFTE(h<10, 48, 55) + h) + CHAR( IFTE(l<10, 48, 55) + l);
END;

DrawTextCentered(s, x, y, fs)
BEGIN
  LOCAL sz;
  sz := TEXTSIZE(s, fs);
  TEXTOUT_P(s, G9, x - sz[1] / 2, y, fs, #FFFFFF:32h);
END;

fn1()
BEGIN
  LOCAL n, data;
  DIMGROB_P(G9, 320, 240, 0);
  RECT(#000000:32h);
  BLIT_P(G9, G0);
  data := {0};
  FOR n FROM 0 TO 359 STEP 2 DO
    data[n / 2 + 1] := R→B(HSV(n, 100, 100), 64, 4) + BITSL(R→B(HSV(n + 1, 100, 100), 64, 4), 32);
  END;
  DIMGROB_P(G2, 360, 1, data);
  data := {0};
  FOR n FROM 0 TO 255 STEP 2 DO
    data[n / 2 + 1] := R→B(RGB(0, 0, 0, 255 - n), 64, 4) + BITSL(R→B(RGB(0, 0, 0, 255 - (n + 1)), 64, 4), 32);
  END;
  DIMGROB_P(G3, 1, 256, data);
  data := {0};
  FOR n FROM 0 TO 255 STEP 2 DO
    LOCAL rgb := {RGB(255, 255, 255, n), RGB(255, 255, 255, n + 1)};
    data[n / 2 + 1] := R→B(RGB(255, 255, 255, n), 64, 4) + BITSL(R→B(RGB(255, 255, 255, n + 1), 64, 4), 32);
  END;
  DIMGROB_P(G4, 256, 1, data);
END;

fn2()
BEGIN
  RECT_P(G9, 0, 220, 51, 239, #666666:32h);
  RECT_P(G9, 53, 220, 104, 239, #666666:32h);
  RECT_P(G9, 106, 220, 210, 239, #666666:32h);
  RECT_P(G9, 212, 220, 263, 239, #666666:32h);
  RECT_P(G9, 265, 220, 319, 239, #666666:32h);
  DrawTextCentered("%", 25, 225, 2);
  DrawTextCentered("d", 78, 225, 2);
  DrawTextCentered("-         HUE         +", 158, 225, 2);
  DrawTextCentered("HSV", 237, 225, 2);
  DrawTextCentered("HSL", 290, 225, 2);
  IF colorsUT == 0 THEN
    TEXTOUT_P("•", G9, 4, 225, 2, #FFFFFF:32h);
  ELSE
    TEXTOUT_P("•", G9, 57, 225, 2, #FFFFFF:32h);
  END;
  IF colorsCS == 0 THEN
    TEXTOUT_P("•", G9, 216, 225, 2, #FFFFFF:32h);
  ELSE
    TEXTOUT_P("•", G9, 269, 225, 2, #FFFFFF:32h);
  END;
END;

fn3(h)
BEGIN
  BLIT_P(G9, 10, 148, 310, 168, G2);
  X := IP(h / 360 * 300) + 10;
  Y := 148;
  RECT_P(G9, X - 3, Y - 3, X + 2, Y + 22, #000000:32h, #FF000000:32h);
  RECT_P(G9, X - 2, Y - 2, X + 2, Y + 21, #FFFFFF:32h, #FF000000:32h);
END;

fn4(h, s, v)
BEGIN
  RECT_P(G9, 10, 10, 137, 137, HSV(h, 100, 100));
  BLIT_P(G9, 10, 10, 138, 138, G4);
  BLIT_P(G9, 10, 10, 138, 138, G3);
  X := s / 100 * 127 + 10;
  Y := (1 - v / 100) * 127 + 10;
  RECT_P(G9, X - 3, Y - 3, X + 2, Y + 2, #000000:32h, #FF000000:32h);
  RECT_P(G9, X - 2, Y - 2, X + 1, Y + 1, #FFFFFF:32h, #FF000000:32h);
END;

fn5()
BEGIN
  RECT(G9, #222222:32h);
  fn2;
  fn3(colorsH);
  fn4(colorsH, colorsS, colorsV);
  // Color Picked
  RECT_P(G9, 154, 10, 309, 42, HSV(colorsH, colorsS, colorsV));
  LOCAL hsl, rgb, cmyk, hex;
  rgb := {colorsR, colorsG, colorsB};
  hsl := HSVtoHSL(colorsH, colorsS, colorsV);
  cmyk := RGBtoCMYK(colorsR, colorsG, colorsB);
  hex := "#" + HEX(colorsR) + HEX(colorsG) + HEX(colorsB);
  L0 := TEXTSIZE(hex, 7);
  TEXTOUT_P(hex, G9, 160 - L0(1) / 2, 180, 7, #FFFFFF:32h);
  LOCAL n, ts, info;
  info := {"R:", "G:", "B:"};
  X := 138;
  Y := 51;
  FOR n := 1 TO 3 STEP 1 DO
    ts := TEXTSIZE(info[n], 3);
    TEXTOUT_P(info[n], G9, X + 15 - ts[1], Y + 3, 3, #FFFFFF:32h);
    RECT_P(G9, X + 16, Y, X + 55, Y + 20, #333333:32h);
    IF channel == 1 AND n == 1 THEN
      RECT_P(G9, X + 54, Y, X + 55, Y + 20, RGB(255, 0, 0));
    END;
    IF channel == 2 AND n == 2 THEN
      RECT_P(G9, X + 54, Y, X + 55, Y + 20, RGB(0, 255, 0));
    END;
    IF channel == 3 AND n == 3 THEN
      RECT_P(G9, X + 54, Y, X + 55, Y + 20, RGB(0, 0, 255));
    END;
    IF colorsUT == 1 THEN
      TEXTOUT_P(rgb[n], G9, X + 22, Y + 5, 2, #FFFFFF:32h);
    ELSE
      TEXTOUT_P(IP(rgb[n] / 255 * 100) + "%", G9, X + 20, Y + 5, 2, #FFFFFF:32h);
    END;
    Y := Y + 24;
  END;
  IF colorsCS == 0 THEN
    info := {"H:", "S:", "V:"};
  END;
  IF colorsCS == 1 THEN
    info := {"H:", "S:", "L:"};
  END;
  X := X + 58;
  Y := 51;
  FOR n FROM 1 TO 3 STEP 1 DO
    ts := TEXTSIZE(info[n], 3);
    TEXTOUT_P(info[n], G9, X + 15 - ts[1], Y + 3, 3, #FFFFFF:32h);
    RECT_P(G9, X + 16, Y, X + 55, Y + 20, #333333:32h);
    CASE
      IF colorsCS == 0 THEN
        IF n == 1 THEN
          TEXTOUT_P(IP(colorsH) + "°", G9, X + 20, Y + 5, 2, #FFFFFF:32h);
        END;
        IF n == 2 THEN
          TEXTOUT_P(IP(colorsS) + "%", G9, X + 20, Y + 5, 2, #FFFFFF:32h);
        END;
        IF n == 3 THEN
          TEXTOUT_P(IP(colorsV) + "%", G9, X + 20, Y + 5, 2, #FFFFFF:32h);
        END;
      END;
      IF colorsCS == 1 THEN
        IF n == 1 THEN
          TEXTOUT_P(IP(hsl[n]) + "°", G9, X + 20, Y + 5, 2, #FFFFFF:32h);
        ELSE
          TEXTOUT_P(IP(hsl[n]) + "%", G9, X + 20, Y + 5, 2, #FFFFFF:32h);
        END;
      END;
    END;
    Y := Y + 24;
  END;
  info := {"C:", "M:", "Y:", "K:"};
  X := X + 58;
  Y := 51;
  FOR n FROM 1 TO 4 STEP 1 DO
    ts := TEXTSIZE(info[n], 3);
    TEXTOUT_P(info[n], G9, X + 15 - ts[1], Y + 3, 3, #FFFFFF:32h);
    RECT_P(G9, X + 16, Y, X + 55, Y + 20, #333333:32h);
    TEXTOUT_P(IP(cmyk[n]) + "%", G9, X + 20, Y + 5, 2, #FFFFFF:32h);
    Y := Y + 24;
  END;
  BLIT_P(G0, G9);
END;

fn6()
BEGIN
  LOCAL rgb;
  rgb := HSVtoRGB(colorsH, colorsS, colorsV);
  colorsR := rgb[1];
  colorsG := rgb[2];
  colorsB := rgb[3];
END;

fn7()
BEGIN
  LOCAL menu := IFTE(Y<220, 0, IP(X / (320 / 6) + 0.025) + 1);
  CASE
    IF menu == 1 THEN
      colorsUT := 0;
    END;
    IF menu == 2 THEN
      colorsUT := 1;
    END;
    IF menu == 3 THEN
      colorsH := floor((colorsH - 29) / 30) * 30;
      fn6;
      HP.MClr;
    END;
    IF menu == 4 THEN
      colorsH := floor(colorsH / 30) * 30 + 30;
      fn6;
      HP.MClr;
    END;
    IF menu == 5 THEN
      colorsCS := 0;
    END;
    IF menu == 6 THEN
      colorsCS := 1;
    END;
  END;
END;

fn8(delta)
BEGIN
  CASE
    IF channel == 1 THEN
      colorsR := colorsR + delta;
      colorsR := IP(MIN(MAX(colorsR, 0), 255));
    END;
    IF channel == 2 THEN
      colorsG := colorsG + delta;
      colorsG := IP(MIN(MAX(colorsG, 0), 255));
    END;
    IF channel == 3 THEN
      colorsB := colorsB + delta;
      colorsB := IP(MIN(MAX(colorsB, 0), 255));
    END;
  END;
  // Update HSV values.
  LOCAL hsv;
  hsv := RGBtoHSV(colorsR, colorsG, colorsB);
  colorsH := hsv[1];
  colorsS := hsv[2];
  colorsV := hsv[3];
END;

fn9(d)
BEGIN
  colorsH := colorsH + d;
  colorsH := IP(MIN(MAX(colorsH, 0), 360));
  fn6;
END;

fnA(d)
BEGIN
  colorsS := colorsS + d;
  colorsS := IP(MIN(MAX(colorsS, 0), 100));
  fn6;
END;

fnB(d)
BEGIN
  colorsV := colorsV + d;
  colorsV := IP(MIN(MAX(colorsV, 0), 100));
  fn6;
END;

fnC()
BEGIN
  LOCAL focus := "";
  WHILE 1 DO
    fn5();
    LOCAL event := WAIT( - 1);
    IF IFTE(SIZE(event) == 1, 1, 0) THEN
      focus := "";
      IFERR
        IF event == 4 THEN
          RETURN;
        END;
        IF event == 30 THEN
          RETURN HSV(colorsH, colorsS, colorsV);
        END;
        IF event == 45 THEN
          IF channel == 0 THEN
            fn9( - 1);
          ELSE
            fn8( - 1);
          END;
        END;
        IF event == 50 THEN
          IF channel == 0 THEN
            fn9(1);
          ELSE
            fn8(1);
          END;
        END;
        IF event == 2 THEN
          IF channel == 0 THEN
            fnB(1);
          ELSE
            channel := channel + IFTE(channel == 1, 2,- 1);
          END;
        END;
        IF event == 12 THEN
          IF channel == 0 THEN
            fnB( - 1);
          ELSE
            channel := channel + IFTE(channel == 3,- 2, 1);
          END;
        END;
        IF event == 7 AND channel == 0 THEN
          fnA( - 1);
        END;
        IF event == 8 AND channel == 0 THEN
          fnA(1);
        END;
      THEN
      END;
    END;
    IF IFTE(SIZE(event)>1, 1, 0) THEN
      X := event[2];
      Y := event[3];
      fn7();
      CASE
        IF event[1] == 0 THEN
          IF X ≥ 5 AND X<315 AND Y ≥ 148 AND Y<188 THEN
            colorsH := (X - 5) / 310 * 360;
            fn6();
            channel := 0;
            focus := "Hue";
          END;
          IF X ≥ 5 AND X<143 AND Y ≥ 5 AND Y<143 THEN
            colorsS := IP((X - 5) / 137 * 100);
            colorsV := IP((1 - (Y - 5) / 137) * 100);
            fn6();
            channel := 0;
            focus := "Saturation & Brightness";
          END;
          IF X ≥ 138 AND X ≤ 193 AND Y ≥ 51 AND Y ≤ 71 THEN
            channel := 1;
          END;
          IF X ≥ 138 AND X ≤ 193 AND Y ≥ 75 AND Y ≤ 95 THEN
            channel := 2;
          END;
          IF X ≥ 138 AND X ≤ 193 AND Y ≥ 99 AND Y ≤ 119 THEN
            channel := 3;
          END;
        END;
        IF event[1] == 1 THEN
          IF focus == "Hue" THEN
            colorsH := (X - 5) / 310 * 360;
            fn6();
          END;
          IF focus == "Saturation & Brightness" THEN
            colorsS := IP((X - 5) / 137 * 100);
            colorsV := IP((1 - (Y - 5) / 137) * 100);
            fn6();
          END;
        END;
        IF event[1] == 2 THEN
          focus := "";
        END;
      END;
      colorsH := IP(MIN(MAX(colorsH, 0), 360));
      colorsS := IP(MIN(MAX(colorsS, 0), 100));
      colorsV := IP(MIN(MAX(colorsV, 0), 100));
    END;
  END;
END;

EXPORT Colors()
BEGIN
  fn1;
  fnC;
END;

